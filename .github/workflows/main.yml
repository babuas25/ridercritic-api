name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  FIREBASE_PROJECT_ID: ridercritic
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "16"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests with coverage
        run: |
          pytest --cov=app tests/ --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check code formatting
        run: |
          black --check --quiet .
          isort --check-only .
          flake8 .

  deploy-dev:
    name: Deploy to Development
    needs: [test, lint]
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Create service account key file
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > config/firebase-credentials.json

      - name: Deploy to Firebase
        run: firebase deploy --only hosting,functions --project ${{ env.FIREBASE_PROJECT_ID }} --token '${{ secrets.FIREBASE_TOKEN }}'

  deploy-staging:
    name: Deploy to Staging
    needs: [test, lint]
    if: github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Create service account key file
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > config/firebase-credentials.json

      - name: Deploy to Firebase
        run: firebase deploy --only hosting,functions --project ${{ env.FIREBASE_PROJECT_ID }}-staging --token '${{ secrets.FIREBASE_TOKEN }}'

  deploy-prod:
    name: Deploy to Production
    needs: [test, lint]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Create service account key file
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}' > config/firebase-credentials.json

      - name: Deploy to Firebase
        run: firebase deploy --only hosting,functions --project ${{ env.FIREBASE_PROJECT_ID }} --token '${{ secrets.FIREBASE_TOKEN }}' 